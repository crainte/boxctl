#!/bin/sh
# This script wraps machinectl and systemctl to facilitate an operational perscription for managing systemd-nspawn OS Containers.

# During initialization, ensure all things are where they are expected to be... or else exit
set -e  # exit on error
set -u  # error on undefined

RED=$(tput setaf 1)$(tput bold)
NORMAL=$(tput sgr0)
BOLD=$(tput bold)
YELLOW=$(tput setaf 3)$(tput bold)
GREEN=$(tput setaf 2)$(tput bold)

# Make sure only root can run our script. The use of exec means "replace
# this program by ", which effectively ends its execution and starts the
# new program, launched by sudo, with root, to run from the top of
# this script (without creating a new process).
[ $(whoami) = root ] || exec sudo $0 $*

# A non-interactive, non-login shell (or similar) does not source the
# /etc/profile env scripts. This should be done manually.
NSPAWN_IMAGES_DIR=/var/lib/machines

BOXCTL_BIN_PATH=$(dirname $(readlink -f $0))
BOXCTL_STORE=$(realpath $BOXCTL_BIN_PATH/../store)
MACHINE_IMAGES_DIR=$(realpath $BOXCTL_BIN_PATH/../machines)
BOXCTL_HOSTNAME_OVERRIDE_FILE=$BOXCTL_STORE/hostname-override


# TODO check to see if this file exists before using it, then check if there are contents
#BOXCTL_BOX_HOSTNAME=$(cat $BOXCTL_HOSTNAME_OVERRIDE_FILE)

BOXCTL_BOX_HOSTNAME=$(hostname)

# The script will facilitate errors now...
set +e
set +u

# Ctrl-C immediately exits the control script
trap "echo '${RED}Canceling operation and exiting.${NORMAL}'; exit" SIGHUP SIGINT SIGTERM

usage () {
cat << EndOfHelp
${BOLD}boxctl - wrapper for systemd-nspawn OS container control.${NORMAL}

   boxctl [command] [options]

${BOLD}Options:${NORMAL}
 -M <hostname>   Change the guest to control. (default matches the hostname of the current system)
                 Note: this option overrides the value in store/hostname-override

${BOLD}Application commands:${NORMAL}
   app-status [-M ...]  Show the current status of the applications.

${BOLD}Container commands:${NORMAL}
   start [-M ...]       Power on the OS container.
   poweroff [-M ...]    Shutdown the OS container.
   restart [-M ...]     Power off then power on the OS container.
   terminate [-M ...]   Forcefully kill the OS container (not recommended).
   enable [-M ...]      Ensure the OS container starts upon reboot of the host.
   disable [-M ...]     Ensure the OS container does *not* start upon reboot of the host.
   status [-M ...]      Determine the operational condition of the OS container.
   list [-M ...]        Show all running OS containers.
   login [-M ...]       Enter a TTY session to the OS container.

${BOLD}Conatiner image/instance commands:${NORMAL}
   list-images               Show avaliable images, current instance, and fallback instance.
   stage-image <tar-path>    Install a new image from the given tar.gz archive.
   cutover-instance <image-name> [-M ...]   Actively cutover to a new instance of the OS.
   fallback-instance [-M ...]               Fallback to a previously used instance.
   delete-instance <image-name> [-M ...]    Delete the instance based off of the given image name.
   reset <image-name> [-M ...]       Reset the current instance to the originally installed image.

${BOLD}Future commands:${NORMAL}
   backup [-M ...]      Make a backup of the current image.
   start-x [-M ...]     Start an ephemeral OS container, which will restore to day-1 upon shutdown

EndOfHelp
}

switchToImage () {
    if [[ -z "$1" ]]; then
        echo "${RED}Please specify an existing image name.${NORMAL}"
        exit 1
    fi

    #if [[ -z "$2" ]]; then
    #    echo "${YELLOW}${BOLD}No fallback image given.${NORMAL}"
    #fi

    IMG_NAME="$1"
    FALLBACK_IMG_NAME="$2"

    IMG_PATH=$(tar-overlay get-mount-path $IMG_NAME)

    if [[ "$IMG_NAME" == "$BOXCTL_CURRENT_BOX" ]]; then
        echo "${RED}Image given is already in use.${NORMAL}"
        exit 1
    fi

    echo "${BOLD}Switching to container image '$IMG_NAME'${NORMAL}"

    set -e # exit on error
    trap "echo \"${RED}Cutover was unsuccessful.${NORMAL}\"; switchToImage $FALLBACK_IMG_NAME ; truncate -s0 $BOXCTL_FALLBACK_FILE ; echo $BOXCTL_FALLBACK_BOX > $BOXCTL_CURRENT_FILE ; exit 1" EXIT

    if [[ "$(/usr/bin/systemctl is-active box@$BOXCTL_BOX_HOSTNAME)" == "active" ]]
    then
       echo "   Powering off Box '$BOXCTL_BOX_HOSTNAME'"
       /usr/bin/machinectl poweroff $BOXCTL_BOX_HOSTNAME
    else
       echo "   Box '$BOXCTL_BOX_HOSTNAME' is already powered off"
    fi

    if [[ ! -z "$BOXCTL_CURRENT_BOX" ]]; then
        echo "   Unmounting existing Box FS"
        tar-overlay umount "$BOXCTL_CURRENT_BOX"
    fi

    echo "   Cutting over to new Box"
    # -L checks to see if the link exists, regardless if the link is broken.
    # If you were to use -e, then if the symlink exists and it points to nothing
    # then the if statement will never be hit. The intention is to always unlink
    # the file regardless of whether it is broken or not.
    if [[ -L "$NSPAWN_IMAGES_DIR/$BOXCTL_BOX_HOSTNAME" ]]; then
        unlink "$NSPAWN_IMAGES_DIR/$BOXCTL_BOX_HOSTNAME"
    fi

    #echo "TEST" "$IMG_PATH" "$NSPAWN_IMAGES_DIR/$BOXCTL_BOX_HOSTNAME" "END TEST"
    ln -s "$IMG_PATH" "$NSPAWN_IMAGES_DIR/$BOXCTL_BOX_HOSTNAME"

    echo "   Mounting new Box FS"
    tar-overlay mount "$IMG_NAME"

    echo "   Powering on Box '$BOXCTL_BOX_HOSTNAME'"
    /usr/bin/systemctl start box@$BOXCTL_BOX_HOSTNAME

    set +e # do not exit on error
    trap - EXIT

    echo "${BOLD}Complete!${NORMAL}"
}

# Only process arguments after the subcommand, getopts will handle the rest.
# Note: it is not safe to reference $1 after this point, use $subcommand instead.
subcommand=$1;
OPTIND=2

# accept a -M with an argument (M:)
# Note: we are not supressing errors from getopts to ensure that -M is always
# accompanied by a positional argument.
while getopts "M:" opt; do
    case $opt in
        M)
            echo "${YELLOW}Overriding hostname to '$OPTARG'${NORMAL}"
            BOXCTL_BOX_HOSTNAME=$OPTARG

            # These two arguments (-M and the value) should not be populated
            # in $2 or $3.
            shift 2;
        ;;
        \?)
            echo "${RED}Invalid option specified${NORMAL}" >&2
            exit 1;
        ;;
    esac
done

# Fetch and otherwise manage all values in the store for this session

BOXCTL_SERVICES_FILE=$BOXCTL_STORE/services
BOXCTL_CURRENT_FILE=$BOXCTL_STORE/$BOXCTL_BOX_HOSTNAME/current-instance
BOXCTL_FALLBACK_FILE=$BOXCTL_STORE/$BOXCTL_BOX_HOSTNAME/fallback-instance

# If this store does not exist, create it with empty entries
if [ ! -d "$BOXCTL_STORE/$BOXCTL_BOX_HOSTNAME/" ]; then
    mkdir "$BOXCTL_STORE/$BOXCTL_BOX_HOSTNAME/"
    touch "$BOXCTL_CURRENT_FILE"
    touch "$BOXCTL_FALLBACK_FILE"
fi

BOXCTL_CURRENT_BOX=$(cat $BOXCTL_CURRENT_FILE)
BOXCTL_FALLBACK_BOX=$(cat $BOXCTL_FALLBACK_FILE)

# Process the subcommand
case "$subcommand" in
app-status)

    if [[ "$(/usr/bin/systemctl is-active box@$BOXCTL_BOX_HOSTNAME)" == "active" ]]; then
        SYSCTL="/usr/bin/systemctl -M $BOXCTL_BOX_HOSTNAME "

        for service in `cat $BOXCTL_SERVICES_FILE`;do
            if [ -z "${service}" ]; then
                echo "---"
            else
                printf "%-20s %s\n" $service $($SYSCTL is-active $service)
            fi
        done
    else
        echo "${BOLD}Container '$BOXCTL_BOX_HOSTNAME' is not running.${NORMAL}"
    fi

;;
start)
    /usr/bin/systemctl start box@$BOXCTL_BOX_HOSTNAME
    exit $?
;;
stop)
    echo "${RED}Invalid option: $subcommand ${NORMAL}" >&2
    echo "${BOLD}Did you mean 'poweroff'?${NORMAL}" >&2
    exit 1
;;
poweroff)
    /usr/bin/machinectl poweroff $BOXCTL_BOX_HOSTNAME
    #/usr/bin/systemctl stop box@$BOXCTL_BOX_HOSTNAME
    exit $?
;;
reboot)
    #/usr/bin/machinectl reboot $BOXCTL_BOX_HOSTNAME
    /usr/bin/systemctl stop box@$BOXCTL_BOX_HOSTNAME
    /usr/bin/systemctl start box@$BOXCTL_BOX_HOSTNAME
    exit $?
;;
login)
    /usr/bin/machinectl login $BOXCTL_BOX_HOSTNAME
    exit $?
;;
terminate)
    /usr/bin/machinectl terminate $BOXCTL_BOX_HOSTNAME
    #/usr/bin/systemctl kill box@$BOXCTL_BOX_HOSTNAME
    exit $?
;;
enable)
    /usr/bin/systemctl enable box@$BOXCTL_BOX_HOSTNAME
    exit $?
;;
disable)
    /usr/bin/systemctl disable box@$BOXCTL_BOX_HOSTNAME
    exit $?
;;
status)
    if [[ "$(/usr/bin/systemctl is-active box@$BOXCTL_BOX_HOSTNAME)" == "active" ]]; then
        /usr/bin/machinectl status $BOXCTL_BOX_HOSTNAME
        #/usr/bin/systemctl status box@$BOXCTL_BOX_HOSTNAME

        exit $?
    else
        echo "${BOLD}Container '$BOXCTL_BOX_HOSTNAME' is not running.${NORMAL}"
    fi
;;
list)
    echo -e "${BOLD}Running Containers:${NORMAL}"
    /usr/bin/machinectl list | sed '1d;$d' | cut -d " " -f1  | sed '/^\s*$/d' | xargs -n 1 | sed 's/^/   /'
    echo -e "${BOLD}Available Containers:${NORMAL}"

    containers=($(ls -1 $NSPAWN_IMAGES_DIR/))
    for containerName in "${containers[@]}"
    do
        instancePath=$(readlink $NSPAWN_IMAGES_DIR/$containerName)
        instanceName=$(basename $(dirname $instancePath))
        # %@* means remove the smallest suffix of the expansion matching the pattern @*
        # which means keep what is left of the @ symbol.
        echo "   $containerName  (using image '${instanceName%@*}')"
    done
    exit $?
;;
list-images)
    if [[ -z "$BOXCTL_CURRENT_BOX" ]] ; then
        BOXCTL_CURRENT_BOX="None"
    fi

    if [[ -z "$BOXCTL_FALLBACK_BOX" ]] ; then
        BOXCTL_FALLBACK_BOX="None"
    fi

    echo -e "${BOLD}Current Container Image   :${NORMAL} $BOXCTL_CURRENT_BOX"
    echo -e "${BOLD}Fallback Container Image  :${NORMAL} $BOXCTL_FALLBACK_BOX"
    #echo -e "${BOLD}Available Container Images:${NORMAL}"
    tar-overlay list-images

    exit $?
;;
stage-image)
    if [[ -z "$2" ]]; then
        echo "${RED}Please specify a path to the container tar.${NORMAL}"
        echo "${BOLD}Usage:${NORMAL}"
        echo "   $0 stage-image <path-to-tar>"
        exit 1
    fi
    IMG_TAR_PATH="$2"

    tar-overlay install-image "$IMG_TAR_PATH"
    exit $?

;;
cutover-instance)
    if [[ -z "$2" ]]; then
        echo "${RED}Please specify an existing image name.${NORMAL}"
        echo "${BOLD}Usage:${NORMAL}"
        echo "   $0 cutover-instance <image-name>"
        exit 1
    fi

    IMG_NAME="$2"
    TAROVERLAY_NAME="${IMG_NAME}@${BOXCTL_BOX_HOSTNAME}"

    #echo "$TAROVERLAY_NAME" "$IMG_NAME"
    tar-overlay create "$TAROVERLAY_NAME" "$IMG_NAME"
    switchToImage $TAROVERLAY_NAME $BOXCTL_FALLBACK_BOX

    echo $BOXCTL_CURRENT_BOX > $BOXCTL_FALLBACK_FILE
    echo $TAROVERLAY_NAME > $BOXCTL_CURRENT_FILE
;;
fallback-instance)
    if [[ -z "$BOXCTL_FALLBACK_BOX" ]]; then
        echo "${RED}${BOLD}There is no fallback image.${NORMAL}"
        exit 1
    fi

    switchToImage $BOXCTL_FALLBACK_BOX

    truncate -s0 $BOXCTL_FALLBACK_FILE
    echo $BOXCTL_FALLBACK_BOX > $BOXCTL_CURRENT_FILE

;;
delete-instance)
    if [[ -z "$2" ]]; then
        echo "${RED}Please specify an existing image name.${NORMAL}"
        echo "${BOLD}Usage:${NORMAL}"
        echo "   $0 delete-instance <instance-name>"
        exit 1
    fi

    if [[ "$(/usr/bin/systemctl is-active box@$BOXCTL_BOX_HOSTNAME)" == "active" ]]; then
        echo "${RED}Cannot delete an instance that is currently running.${NORMAL}"
        exit 1
    fi

    IMG_NAME="$2"
    TAROVERLAY_NAME="${IMG_NAME}@${BOXCTL_BOX_HOSTNAME}"

    echo "Removing instance '$TAROVERLAY_NAME'..."

    tar-overlay umount "$TAROVERLAY_NAME"
    tar-overlay delete "$TAROVERLAY_NAME"

    #/usr/bin/machinectl remove "$IMG_NAME"

    echo "${BOLD}Complete!${NORMAL}"
;;
reset-instance)
    if [[ -z "$2" ]]; then
        echo "${RED}Please specify an existing image name.${NORMAL}"
        echo "${BOLD}Usage:${NORMAL}"
        echo "   $0 reset-instance <instance-name>"
        exit 1
    fi

    if [[ "$(/usr/bin/systemctl is-active box@$BOXCTL_BOX_HOSTNAME)" == "active" ]]; then
        echo "${RED}Cannot reset an instance that is currently running.${NORMAL}"
        exit 1
    fi

    IMG_NAME="$2"
    TAROVERLAY_NAME="${IMG_NAME}@${BOXCTL_BOX_HOSTNAME}"

    tar-overlay umount "$TAROVERLAY_NAME"
    tar-overlay reset  "$TAROVERLAY_NAME"
    tar-overlay mount  "$TAROVERLAY_NAME"

;;
help)
    usage
;;
*)
    usage
    exit 1
;;
esac
