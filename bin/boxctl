#!/bin/sh
# This script wraps machinectl and systemctl to facilitate an operational perscription for managing systemd-nspawn OS Containers.

# During initialization, ensure all things are where they are expected to be... or else exit
set -e  # exit on error
set -u  # error on undefined

RED=$(tput setaf 1)$(tput bold)
NORMAL=$(tput sgr0)
BOLD=$(tput bold)
YELLOW=$(tput setaf 3)$(tput bold)
GREEN=$(tput setaf 2)$(tput bold)

# Make sure only root can run our script. The use of exec means "replace
# this program by ", which effectively ends its execution and starts the
# new program, launched by sudo, with root, to run from the top of
# this script (without creating a new process).
[ $(whoami) = root ] || exec sudo $0 $*

# A non-interactive, non-login shell (or similar) does not source the
# /etc/profile env scripts. This should be done manually.
NSPAWN_IMAGES_DIR=/var/lib/machines

#BOXCTL_BIN_PATH=$(dirname $(readlink -f $0))
#BOXCTL_STORE=$(realpath $BOXCTL_BIN_PATH/../store)
BOXCTL_BIN_PATH=/opt/boxctl/bin
BOXCTL_STORE=/opt/boxctl/store
#MACHINE_IMAGES_DIR=$(realpath $BOXCTL_BIN_PATH/../machines)

# The script will facilitate errors now...
set +e
set +u

# Ctrl-C immediately exits the control script
trap "echo '${RED}Canceling operation and exiting.${NORMAL}'; exit" SIGHUP SIGINT SIGTERM

usage () {
cat << EndOfHelp
${BOLD}boxctl - wrapper for systemd-nspawn OS container control.${NORMAL}

    boxctl <command> <instance-name> [<image-name>]

${BOLD}Application commands:${NORMAL}
    app-status <name>  Show the current status of the applications.

${BOLD}Container commands:${NORMAL}
    configure <name>   Enter the container without booting it (for making filesystem changes).
    disable <name>     Ensure the OS container does *not* start upon reboot of the host.
    enable <name>      Ensure the OS container starts upon reboot of the host.
    list <name>        Show all running OS containers.
    login <name>       Enter a TTY session to the OS container.
    poweroff <name>    Shutdown the OS container.
    restart <name>     Power off then power on the OS container.
    start <name>       Power on the OS container.
    status <name>      Determine the operational condition of the OS container.
    terminate <name>   Forcefully kill the OS container (not recommended).

${BOLD}Conatiner image/instance commands:${NORMAL}
    cutover-instance <name> <image-name>   Actively cutover to a new instance of the OS.
    delete-instance <name> <image-name>    Delete the instance based off of the given image name.
    fallback-instance <name>               Fallback to a previously used instance.
    list-images                     Show avaliable images, current instance, and fallback instance.
    reset <name> <image-name>       Reset the current instance to the originally installed image.
    stage-image <tar-path>          Install a new image from the given tar.gz archive.

${BOLD}Future commands:${NORMAL}
    backup <name>      Make a backup of the current image.
    start-x <name>     Start an ephemeral OS container, which will restore to day-1 upon shutdown

EndOfHelp
}

switchToImage () {
    if [[ -z "$1" ]]; then
        echo "${RED}Please specify an existing image name.${NORMAL}"
        exit 1
    fi

    #if [[ -z "$2" ]]; then
    #    echo "${YELLOW}${BOLD}No fallback image given.${NORMAL}"
    #fi

    IMG_NAME="$1"
    FALLBACK_IMG_NAME="$2"

    IMG_PATH=$(tar-overlay get-mount-path $IMG_NAME)

    if [[ "$IMG_NAME" == "$BOXCTL_CURRENT_OVERLAY" ]]; then
        echo "${RED}Image given is already in use.${NORMAL}"
        exit 1
    fi

    echo "${BOLD}Switching to container image '$IMG_NAME'${NORMAL}"

    set -e # exit on error
    trap "echo \"${RED}Cutover was unsuccessful.${NORMAL}\"; switchToImage $FALLBACK_IMG_NAME ; truncate -s0 $BOXCTL_FALLBACK_OVERLAY_FILE ; echo $BOXCTL_FALLBACK_OVERLAY > $BOXCTL_CURRENT_OVERLAY_FILE ; exit 1" EXIT

    if [[ "$(/usr/bin/systemctl is-active box@$BOXCTL_BOX_HOSTNAME)" == "active" ]]
    then
       echo "   Powering off Box '$BOXCTL_BOX_HOSTNAME'"
       /usr/bin/machinectl poweroff $BOXCTL_BOX_HOSTNAME
    else
       echo "   Box '$BOXCTL_BOX_HOSTNAME' is already powered off"
    fi

    if [[ ! -z "$BOXCTL_CURRENT_OVERLAY" ]]; then
        echo "   Unmounting existing Box filesystem"
        tar-overlay umount "$BOXCTL_CURRENT_OVERLAY"
    fi

    echo "   Cutting over to new Box"
    # -L checks to see if the link exists, regardless if the link is broken.
    # If you were to use -e, then if the symlink exists and it points to nothing
    # then the if statement will never be hit. The intention is to always unlink
    # the file regardless of whether it is broken or not.
    if [[ -L "$NSPAWN_IMAGES_DIR/$BOXCTL_BOX_HOSTNAME" ]]; then
        unlink "$NSPAWN_IMAGES_DIR/$BOXCTL_BOX_HOSTNAME"
    fi

    #echo "TEST" "$IMG_PATH" "$NSPAWN_IMAGES_DIR/$BOXCTL_BOX_HOSTNAME" "END TEST"
    ln -s "$IMG_PATH" "$NSPAWN_IMAGES_DIR/$BOXCTL_BOX_HOSTNAME"

    echo "   Mounting new Box filesystem"
    tar-overlay mount "$IMG_NAME"

    echo "   Powering on Box '$BOXCTL_BOX_HOSTNAME'"
    /usr/bin/systemctl start box@$BOXCTL_BOX_HOSTNAME

    set +e # do not exit on error
    trap - EXIT

    echo "${BOLD}Complete!${NORMAL}"
}

function checkForInstanceName() {
    if [[ -z "$BOXCTL_BOX_HOSTNAME" ]]; then
        echo "${RED}Please specify a container instance name.${NORMAL}"
        exit 1
    fi
}

# Fetch and otherwise manage all values in the store for this session
subcommand=$1
BOXCTL_BOX_HOSTNAME=$2
BOXCTL_SERVICES_FILE=$BOXCTL_STORE/services
BOXCTL_CURRENT_OVERLAY_FILE=$BOXCTL_STORE/$BOXCTL_BOX_HOSTNAME/current-instance
BOXCTL_FALLBACK_OVERLAY_FILE=$BOXCTL_STORE/$BOXCTL_BOX_HOSTNAME/fallback-instance

# If this store does not exist, create it with empty entries
if [ ! -d "$BOXCTL_STORE/$BOXCTL_BOX_HOSTNAME/" ]; then
    mkdir "$BOXCTL_STORE/$BOXCTL_BOX_HOSTNAME/"
    touch "$BOXCTL_CURRENT_OVERLAY_FILE"
    touch "$BOXCTL_FALLBACK_OVERLAY_FILE"
fi

[ -f $BOXCTL_CURRENT_OVERLAY_FILE ] && BOXCTL_CURRENT_OVERLAY=$(cat $BOXCTL_CURRENT_OVERLAY_FILE)
[ -f $BOXCTL_FALLBACK_OVERLAY_FILE ] && BOXCTL_FALLBACK_OVERLAY=$(cat $BOXCTL_FALLBACK_OVERLAY_FILE)

# Process the subcommand
case "$subcommand" in
app-status)
    checkForInstanceName
    if [[ "$(/usr/bin/systemctl is-active box@$BOXCTL_BOX_HOSTNAME)" == "active" ]]; then
        SYSCTL="/usr/bin/systemctl -M $BOXCTL_BOX_HOSTNAME "

        for service in `cat $BOXCTL_SERVICES_FILE`;do
            if [ -z "${service}" ]; then
                echo "---"
            else
                printf "%-20s %s\n" $service $($SYSCTL is-active $service)
            fi
        done
    else
        echo "${BOLD}Container '$BOXCTL_BOX_HOSTNAME' is not running.${NORMAL}"
    fi

;;
configure)
    checkForInstanceName
    /usr/bin/systemd-nspawn --machine $BOXCTL_BOX_HOSTNAME -D /var/lib/machines/$BOXCTL_BOX_HOSTNAME/
    exit $?
;;
start)
    checkForInstanceName
    /usr/bin/tar-overlay mount $BOXCTL_CURRENT_OVERLAY
    /usr/bin/systemctl start box@$BOXCTL_BOX_HOSTNAME
    exit $?
;;
stop)
    checkForInstanceName
    echo "${RED}Invalid option: $subcommand ${NORMAL}" >&2
    echo "${BOLD}Did you mean 'poweroff'?${NORMAL}" >&2
    exit 1
;;
poweroff)
    checkForInstanceName
    /usr/bin/machinectl poweroff $BOXCTL_BOX_HOSTNAME
    #/usr/bin/systemctl stop box@$BOXCTL_BOX_HOSTNAME
    exit $?
;;
reboot)
    checkForInstanceName
    #/usr/bin/machinectl reboot $BOXCTL_BOX_HOSTNAME
    /usr/bin/systemctl stop box@$BOXCTL_BOX_HOSTNAME
    /usr/bin/systemctl start box@$BOXCTL_BOX_HOSTNAME
    exit $?
;;
login)
    checkForInstanceName
    /usr/bin/machinectl login $BOXCTL_BOX_HOSTNAME
    exit $?
;;
terminate)
    checkForInstanceName
    /usr/bin/machinectl terminate $BOXCTL_BOX_HOSTNAME
    #/usr/bin/systemctl kill box@$BOXCTL_BOX_HOSTNAME
    exit $?
;;
enable)
    checkForInstanceName
    /usr/bin/systemctl enable box@$BOXCTL_BOX_HOSTNAME
    exit $?
;;
disable)
    checkForInstanceName
    /usr/bin/systemctl disable box@$BOXCTL_BOX_HOSTNAME
    exit $?
;;
status)
    checkForInstanceName
    if [[ "$(/usr/bin/systemctl is-active box@$BOXCTL_BOX_HOSTNAME)" == "active" ]]; then
        /usr/bin/machinectl status $BOXCTL_BOX_HOSTNAME
        #/usr/bin/systemctl status box@$BOXCTL_BOX_HOSTNAME

        exit $?
    else
        echo "${BOLD}Container '$BOXCTL_BOX_HOSTNAME' is not running.${NORMAL}"
    fi
;;
list)
    echo -e "${BOLD}Running Containers:${NORMAL}"
    /usr/bin/machinectl list | sed '1d;$d' | cut -d " " -f1  | sed '/^\s*$/d' | xargs -n 1 | sed 's/^/   /'
    echo -e "${BOLD}Available Containers:${NORMAL}"

    containers=($(ls -1 $NSPAWN_IMAGES_DIR/))
    for containerName in "${containers[@]}"
    do
        instancePath=$(readlink $NSPAWN_IMAGES_DIR/$containerName)
        instanceName=$(basename $(dirname $instancePath))
        # %@* means remove the smallest suffix of the expansion matching the pattern @*
        # which means keep what is left of the @ symbol.
        echo "   $containerName  (using image '${instanceName%@*}')"
    done
    exit $?
;;
list-images)
    if [[ -z "$BOXCTL_CURRENT_OVERLAY" ]] ; then
        BOXCTL_CURRENT_OVERLAY="None"
    fi

    if [[ -z "$BOXCTL_FALLBACK_OVERLAY" ]] ; then
        BOXCTL_FALLBACK_OVERLAY="None"
    fi

    echo -e "${BOLD}Current Container Image   :${NORMAL} $BOXCTL_CURRENT_OVERLAY"
    echo -e "${BOLD}Fallback Container Image  :${NORMAL} $BOXCTL_FALLBACK_OVERLAY"
    #echo -e "${BOLD}Available Container Images:${NORMAL}"
    tar-overlay list-images

    exit $?
;;
stage-image)
    if [[ -z "$3" ]]; then
        echo "${RED}Please specify a path to the container tar.${NORMAL}"
        echo "${BOLD}Usage:${NORMAL}"
        echo "   $0 stage-image <path-to-tar>"
        exit 1
    fi
    IMG_TAR_PATH="$3"

    tar-overlay install-image "$IMG_TAR_PATH"
    exit $?

;;
cutover-instance)
    checkForInstanceName
    if [[ -z "$3" ]]; then
        echo "${RED}Please specify an existing image name.${NORMAL}"
        echo "${BOLD}Usage:${NORMAL}"
        echo "   $0 cutover-instance <image-name>"
        exit 1
    fi

    IMG_NAME="$3"
    TAROVERLAY_NAME="${IMG_NAME}@${BOXCTL_BOX_HOSTNAME}"

    #echo "$TAROVERLAY_NAME" "$IMG_NAME"
    tar-overlay create "$TAROVERLAY_NAME" "$IMG_NAME"
    switchToImage $TAROVERLAY_NAME $BOXCTL_FALLBACK_OVERLAY

    echo $BOXCTL_CURRENT_OVERLAY > $BOXCTL_FALLBACK_OVERLAY_FILE
    echo $TAROVERLAY_NAME > $BOXCTL_CURRENT_OVERLAY_FILE
;;
fallback-instance)
    checkForInstanceName
    if [[ -z "$BOXCTL_FALLBACK_OVERLAY" ]]; then
        echo "${RED}${BOLD}There is no fallback image.${NORMAL}"
        exit 1
    fi

    switchToImage $BOXCTL_FALLBACK_OVERLAY

    truncate -s0 $BOXCTL_FALLBACK_OVERLAY_FILE
    echo $BOXCTL_FALLBACK_OVERLAY > $BOXCTL_CURRENT_OVERLAY_FILE

;;
delete-instance)
    checkForInstanceName
    if [[ -z "$3" ]]; then
        echo "${RED}Please specify an existing image name.${NORMAL}"
        echo "${BOLD}Usage:${NORMAL}"
        echo "   $0 delete-instance <name> <image-name>"
        exit 1
    fi

    if [[ "$(/usr/bin/systemctl is-active box@$BOXCTL_BOX_HOSTNAME)" == "active" ]]; then
        echo "${RED}Cannot delete an instance that is currently running.${NORMAL}"
        exit 1
    fi

    IMG_NAME="$3"
    TAROVERLAY_NAME="${IMG_NAME}@${BOXCTL_BOX_HOSTNAME}"

    echo "Removing instance '$TAROVERLAY_NAME'..."

    tar-overlay umount "$TAROVERLAY_NAME"
    tar-overlay delete "$TAROVERLAY_NAME"
    unlink "$NSPAWN_IMAGES_DIR/$BOXCTL_BOX_HOSTNAME"

    #/usr/bin/machinectl remove "$IMG_NAME"

    echo "${BOLD}Complete!${NORMAL}"
;;
reset-instance)
    checkForInstanceName
    if [[ -z "$3" ]]; then
        echo "${RED}Please specify an existing image name.${NORMAL}"
        echo "${BOLD}Usage:${NORMAL}"
        echo "   $0 reset-instance <instance-name>"
        exit 1
    fi

    if [[ "$(/usr/bin/systemctl is-active box@$BOXCTL_BOX_HOSTNAME)" == "active" ]]; then
        echo "${RED}Cannot reset an instance that is currently running.${NORMAL}"
        exit 1
    fi

    IMG_NAME="$3"
    TAROVERLAY_NAME="${IMG_NAME}@${BOXCTL_BOX_HOSTNAME}"

    tar-overlay umount "$TAROVERLAY_NAME"
    tar-overlay reset  "$TAROVERLAY_NAME"
    tar-overlay mount  "$TAROVERLAY_NAME"

;;
help)
    usage
;;
*)
    usage
    exit 1
;;
esac
